#include<iostream>
#include<cmath>
#include<graphics.h>
using namespace std;

int sgn(float a) {
if (a > 0) {
return 1;}
else if (a == 0) {
return 0;}
else {return 1;}
}


void run(float x, float y, float xline,float yline, int length);

void circlel(int xc, int yc, int x, int y) {
putpixel(xc+x,yc+y,WHITE);
putpixel(xc-x,yc+y,WHITE);
putpixel(xc+x,yc-y,WHITE);
putpixel(xc-x,yc-y,WHITE);
putpixel(xc+y, yc+x,WHITE);
putpixel(xc-y, yc+x,WHITE);
putpixel(xc+y, yc-x,WHITE);
putpixel(xc-y, yc-x,WHITE);
}

void dcircle(int xc, int yc, int r) {
int x = 0;
int y = r;
int p = 3-2*r;
circlel(xc,yc,x,y);
while (y>=x) {
	x++;
	if (p>0) {
		y--;
		p = p + 4*(x-y)+10;
		}
	else {
		p = p+4*x + 6;
		}
		circlel(xc,yc,x,y);
}
}


//DDA
int linel(int x1, int y1, int x2, int y2) 
{
int delx, dely, length;
float xline, yline,x,y;
delx = abs(x2 - x1);
dely = abs(y2 - y1);
if (delx >= dely) {
length = delx;}
else {length = dely;}

xline = (float)(x2 - x1)/length;
yline = (float)(y2 - y1)/length;

x = x1;
y = y1;

int i = 0;
while (i<=length) {
putpixel(x, y, 111);
x = x + xline;
y = y + yline;
i = i+1;
}
return 0;
	}
	
	
void linelol2(int x1, int y1, int x2, int y2) {
int dx,dy,i,pk;
dx = abs(x2-x1); dy = abs(y2-y1);
int x = x1, y = y1;

putpixel(x,y,111);
pk = (2*dy)-dx;

for (i = 0; i<dx; i++) {
if (pk < 0) {
x = x + 1;
y = y;
pk = pk +(2*dy);
}
else {
x = x + 1;
y = y + 1;
pk = pk + 2*dy - 2*dx;
}
putpixel(x,y,111);
}}



int main() {

int gmode,gdriver=DETECT;
initgraph(&gdriver, &gmode, NULL);

int x1 = 100,y1 = 100;
int x2 = 200,y2 = 200;

linel(x1,y1,x2,y1);
linel(x1,y1,x1,y2);
linel(x1,y2,x2,y2);
linel(x2,y2,x2,y1);

linel(x1,(y1+y2)/2,(x2+x1)/2,y1);
linel(x1,(y1+y2)/2,(x1+x2)/2,y2);
linel((x1+x2)/2,y2, x2,(y1+y2)/2);
linel(x2,(y1+y2)/2,(x1+x2)/2, y1);

int xc = (x1+x2)/2;
int yc = (y1+y2)/2;

int side_mid_x = (x1 + (x1+x2)/2)/2;
int side_mid_y = (y2 + (y1+y2)/2)/2;

int r = sqrt((side_mid_x - xc)*(side_mid_x - xc) + (side_mid_y - yc)*(side_mid_y - yc));

dcircle(xc,yc,r);

delay(5000);
closegraph();
}


